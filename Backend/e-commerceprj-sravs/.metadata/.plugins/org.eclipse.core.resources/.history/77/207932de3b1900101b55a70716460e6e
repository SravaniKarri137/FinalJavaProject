package com.example.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import com.example.dto.CartRequest;
import com.example.dto.OrderRequest;
import com.example.dto.OrderResponse;
import com.example.entity.CartItem;
import com.example.service.CartService;
import java.util.List;

@RestController
@RequestMapping("/api/cart")
@CrossOrigin(origins = "*")
public class CartController {

    @Autowired
    private CartService cartService;

    private String extractToken(String authHeader) {
        return authHeader.startsWith("Bearer ") ? authHeader.substring(7) : authHeader;
    }

    @PostMapping("/add")
    public ResponseEntity<CartItem> addToCart(@RequestHeader("Authorization") String authHeader, @RequestBody CartRequest request) {
        String token = extractToken(authHeader);
        CartItem item = cartService.addToCart(token, request.getProductId(), request.getQuantity());
        return ResponseEntity.ok(item);
    }

    @GetMapping("/get")
    public ResponseEntity<List<CartItem>> getCartItems(@RequestHeader("Authorization") String authHeader) {
        List<CartItem> items = cartService.getCartItems(extractToken(authHeader));
        return ResponseEntity.ok(items);
    }

    @PutMapping("/update")
    @Transactional
    public ResponseEntity<List<CartItem>> updateCartItem(@RequestHeader("Authorization") String authHeader, @RequestBody CartRequest request) {
        String token = extractToken(authHeader);
        cartService.updateCartItemQuantity(token, request.getProductId(), request.getQuantity());
        List<CartItem> updatedItems = cartService.getCartItems(token);
        return ResponseEntity.ok(updatedItems);
    }

    @DeleteMapping("/remove")
    @Transactional
    public ResponseEntity<String> removeItem(@RequestHeader("Authorization") String authHeader, @RequestBody CartRequest request) {
        cartService.removeItem(extractToken(authHeader), request.getProductId());
        return ResponseEntity.ok("Item removed from cart");
    }

    @DeleteMapping("/clear")
    @Transactional
    public ResponseEntity<String> clearCart(@RequestHeader("Authorization") String authHeader) {
        cartService.clearCart(extractToken(authHeader));
        return ResponseEntity.ok("Cart cleared successfully");
    }

    @GetMapping("/count")
    public ResponseEntity<Integer> getCartCount(@RequestHeader("Authorization") String authHeader) {
        int count = cartService.countItems(extractToken(authHeader));
        return ResponseEntity.ok(count);
    }

    @GetMapping("/total")
    public ResponseEntity<Double> getTotalForSelectedItems(@RequestHeader("Authorization") String authHeader) {
        double total = cartService.calculateTotalOfSelectedItems(extractToken(authHeader));
        if (total == 0) {
            return ResponseEntity.badRequest().body(null);  // Handle no items found
        }
        return ResponseEntity.ok(total);
    }

    @PostMapping("/checkout")
    @Transactional
    public ResponseEntity<OrderResponse> checkout(@RequestHeader("Authorization") String authHeader, @RequestBody OrderRequest request) {
        OrderResponse response = cartService.checkout(extractToken(authHeader), request);
        return response != null ? ResponseEntity.ok(response) : ResponseEntity.badRequest().build();
    }
}
