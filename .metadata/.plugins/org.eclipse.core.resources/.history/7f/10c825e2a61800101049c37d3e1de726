package com.example.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.entity.ReturnAndCancelled;
import com.example.entity.User;
import com.example.repository.UserRepository;
import com.example.security.JwtUtil;
import com.example.service.ReturnAndCancelledService;

import jakarta.servlet.http.HttpServletRequest;
@RestController
@RequestMapping("/api/returns")
public class ReturnAndCancelledController {

    @Autowired
    private ReturnAndCancelledService returnService;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtUtil;

    @GetMapping("/order/{orderId}")
    public ResponseEntity<?> getReturnsByOrderId(
            @PathVariable Long orderId,
            HttpServletRequest request
    ) {
        String username = getUsernameFromToken(request);

        if (username == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized: Invalid token");
        }

        Optional<User> userOpt = userRepository.findByUsername(username);
        if (userOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
        }

        User user = userOpt.get();
        List<ReturnAndCancelled> returns = returnService.getReturnsByUserAndOrder(user.getId(), orderId);

        Map<String, Object> response = new HashMap<>();
        response.put("username", user.getUsername());
        response.put("returns", returns);

        return ResponseEntity.ok(response);
    }

    private String getUsernameFromToken(HttpServletRequest request) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            return jwtUtil.extractUsername(token);
        }
        return null;
    }
}
