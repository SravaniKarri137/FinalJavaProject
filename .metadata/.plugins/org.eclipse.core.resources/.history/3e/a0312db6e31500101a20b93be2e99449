package com.example.service.impl;

import com.example.dto.RequestWithRemarksDTO;
import com.example.entity.Order;
import com.example.repository.OrderRepository;
import com.example.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class OrderServiceImpl implements OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Override
    public ResponseEntity<String> requestCancellation(Long orderId, RequestWithRemarksDTO request, String username) {
        // Find order by ID
        Optional<Order> orderOpt = orderRepository.findById(orderId);

        if (!orderOpt.isPresent()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Order not found.");
        }

        Order order = orderOpt.get();

        // Validate that the order belongs to the current user
        if (!order.getUser().getUsername().equals(username)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("You can only cancel your own orders.");
        }

        // Process the cancellation request
        order.setStatus("Cancellation Requested");
        order.setRemarks(request.getRemarks());
        orderRepository.save(order);

        // Handle images if necessary
        if (request.getImages() != null) {
            // Process the images (this part would require saving the files if needed)
        }

        return ResponseEntity.ok("Cancellation request successful.");
    }

    @Override
    public ResponseEntity<String> approveCancellation(Long orderId) {
        // Find the order
        Optional<Order> orderOpt = orderRepository.findById(orderId);
        if (!orderOpt.isPresent()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Order not found.");
        }

        Order order = orderOpt.get();

        // Only allow admin or a user with appropriate rights to approve
        order.setStatus("Cancelled");
        orderRepository.save(order);

        return ResponseEntity.ok("Cancellation approved.");
    }

    @Override
    public ResponseEntity<String> requestReturn(Long orderId, RequestWithRemarksDTO request, String username) {
        // Find order by ID
        Optional<Order> orderOpt = orderRepository.findById(orderId);

        if (!orderOpt.isPresent()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Order not found.");
        }

        Order order = orderOpt.get();

        // Validate that the order belongs to the current user
        if (!order.getUser().getUsername().equals(username)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("You can only return your own orders.");
        }

        // Process the return request
        order.setStatus("Return Requested");
        order.setRemarks(request.getRemarks());
        orderRepository.save(order);

        return ResponseEntity.ok("Return request successful.");
    }

    @Override
    public List<Order> getOrdersByUser(String username) {
        return orderRepository.findByUserUsername(username);
    }

    @Override
    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }
}
