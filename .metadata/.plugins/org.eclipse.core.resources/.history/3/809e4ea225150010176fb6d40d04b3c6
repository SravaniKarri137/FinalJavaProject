package com.example.service;

import com.example.dto.TransactionRequest;
import com.example.dto.TransactionItemRequest;
import com.example.entity.*;
import com.example.repository.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Service
public class TransactionService {

    @Autowired
    private UserRepository userRepo;

    @Autowired
    private ProductRepository productRepo;

    @Autowired
    private TransactionRepository transactionRepo;

    @Autowired
    private TransactionItemRepository itemRepo;

    public Transaction placeOrder(TransactionRequest request) {
        User user = userRepo.findByUsername(request.getUsername());
        if (user == null) throw new RuntimeException("User not found");

        List<TransactionItem> items = new ArrayList<>();
        double totalAmount = 0;

        Transaction transaction = new Transaction();
        transaction.setUser(user);
        transaction.setTransactionDate(LocalDateTime.now());

        // Save transaction early to generate ID for item mapping
        transaction = transactionRepo.save(transaction);

        for (TransactionItemRequest itemReq : request.getItems()) {
            Product product = productRepo.findById(itemReq.getProductId()).orElse(null);
            if (product == null || itemReq.getQuantity() <= 0) continue;

            TransactionItem item = new TransactionItem();
            item.setProduct(product);
            item.setQuantity(itemReq.getQuantity());
            item.setPrice(product.getPrice());
            item.setTransaction(transaction);

            totalAmount += product.getPrice() * itemReq.getQuantity();
            items.add(item);
        }

        itemRepo.saveAll(items);
        transaction.setItems(items);
        transaction.setTotalAmount(totalAmount);
        return transactionRepo.save(transaction);
    }

    public List<Transaction> getUserTransactions(String username) {
        User user = userRepo.findByUsername(username);
        return transactionRepo.findByUser(user);
    }
}
