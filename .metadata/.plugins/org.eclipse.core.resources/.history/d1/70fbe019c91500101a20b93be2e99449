package com.example.controller;

import com.example.entity.Coupon;
import com.example.entity.Product;
import com.example.entity.Review;
import com.example.repository.CouponRepository;
import com.example.service.ProductService;
import com.example.service.ReviewService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/products")
@CrossOrigin(origins = "*")
public class ProductController {

    @Autowired
    private ProductService service;

    @Autowired
    private ReviewService reviewService;
    
    @Autowired
    private CouponRepository couponRepo;


    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/add")
    public Product addProduct(@RequestBody Product product) {
        return service.saveProduct(product);
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("/update/{id}")
    public Product updateProduct(@PathVariable Long id, @RequestBody Product updatedProduct) {
        Product existingProduct = service.getProductById(id);
        if (existingProduct == null) {
            throw new RuntimeException("Product not found with ID: " + id);
        }

        existingProduct.setName(updatedProduct.getName());
        existingProduct.setDescription(updatedProduct.getDescription());
        existingProduct.setPrice(updatedProduct.getPrice());
        existingProduct.setBrand(updatedProduct.getBrand());
        existingProduct.setCategory(updatedProduct.getCategory());
        existingProduct.setImageUrl(updatedProduct.getImageUrl());
        existingProduct.setColor(updatedProduct.getColor());
        existingProduct.setSize(updatedProduct.getSize());
        existingProduct.setStock(updatedProduct.getStock());

        return service.saveProduct(existingProduct);
    }

    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("/delete/{productId}")
    public void deleteProduct(@PathVariable Long productId) {
        service.deleteProduct(productId);
    }
  


    @GetMapping
    public List<Product> getAllProducts() {
        return service.getAllProducts();
    }

    @GetMapping("/{id}")
    public Product getProduct(@PathVariable Long id) {
        return service.getProductById(id);
    }

    @GetMapping("/category/{category}")
    public List<Product> getByCategory(@PathVariable String category) {
    	 System.out.println("Product Deleted! ");
        return service.getByCategory(category);
    }

    @GetMapping("/brand/{brand}")
    public List<Product> getByBrand(@PathVariable String brand) {
        return service.getByBrand(brand);
    }

    @GetMapping("/{productId}/reviews")
    public List<Review> getProductReviews(@PathVariable Long productId) {
        return reviewService.getReviewsForProduct(productId);
    }
}
